# vim:ft=conf:fdm=marker

# [TODO] Active / Inactive pane background

# OPTIONS {{{
# (C-b) Set the key accepted as a prefix key.
set-option -g prefix C-a

# [OSX] Don't run new tmux windows as login sessions (path_helper woes)
if-shell "uname | grep -q Darwin" "set -g default-command 'reattach-to-user-namespace ${SHELL}'"

# (0) Set the starting index for window numbers.
set -g base-index 1
# (0) Like base-index, but set the starting index for pane numbers.
setw -g pane-base-index 1
# (500) Time in ms tmux waits after an escape is input to determine if function or meta key seq
set -s escape-time 0
# (emacs) Use vi-style key bindings in the status line
set -g status-keys vi
# (emacs) Use vi-style key bindings in copy and choice modes.
setw -g mode-keys vi
# Set up TERM (italics file in .iterm stow)
set -g default-terminal "tmux-256color"
# Entries which override terminal descriptions
set-option -ga terminal-overrides ",xterm-256color-italic:Tc"
# Aggressively resize chosen windows
set-window-option -g aggressive-resize
#}}}

# KEYMAPS {{{
bind-key a send-prefix

# Reload config file
bind-key r \
	source-file ~/.tmux.conf \;\
	display 'Reloaded ~/.tmux.conf'

# Toggle pane synchronization
bind-key s \
	setw synchronize-panes \;\
	display 'Synch: #{?pane_synchronized,on,off}'

# Toggle mouse
bind-key m \
	run "if [[ `tmux show | grep mouse.*on` ]]; then m=off; else m=on; fi; tmux set mouse \$m"

# vim-like bindings for pane and window
# pane : move / split / close - lowercase
bind-key -r h select-pane -t {left-of}
bind-key -r j select-pane -t {down-of}
bind-key -r k select-pane -t {up-of}
bind-key -r l select-pane -t {right-of}

# split to match vim (top and left)
bind-key n split-window -hb -c "#{pane_current_path}"
bind-key v split-window -vb -c "#{pane_current_path}"

bind-key q confirm-before -p "kill-pane #P? (y/n)" kill-pane

# pane : swap - uppercase
bind-key -r H swap-pane -t {left-of}
bind-key -r J swap-pane -t {down-of}
bind-key -r K swap-pane -t {up-of}
bind-key -r L swap-pane -t {right-of}

# pane : resize 
bind-key -r < resize-pane -L 5
bind-key -r - resize-pane -D 5
bind-key -r + resize-pane -U 5
bind-key -r > resize-pane -R 5

# window : move / create  / close - CTRL-lowercase
bind-key -r C-a last-window
bind-key -r C-h select-window -t {previous}
bind-key -r C-l select-window -t {next}

# c creates new window in current path
bind-key c   new-window -c "#{pane_current_path}"

bind-key C-q confirm-before -p "kill-window #W? (y/n)" kill-window

# copy-paste
bind-key Escape copy-mode
bind-key p 	paste-buffer

# Bind ']' to use pbpaste
bind-key ] run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"

# Capture pane to new vim session
bind-key e capture-pane -S - '\;' split-window -h "tmux show-buffer | sed '/^\s*$/d' | reattach-to-user-namespace view - +'$' +'set clipboard=unnamed'; reattach-to-user-namespace pbpaste | tmux load-buffer -"

# Unified vim/tmux window/pane movement {{{
# This, along with settings in vimrc, allow C-h/j/k/l to move between tmux
# splits and vim windows seamlessly
bind -n C-h run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_title}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
#}}}
#}}}

# HOOKS {{{
#set-hook after-next-layout "display 'Layout: #{window_layout}'"
#}}}

# PLUGINS {{{
# tmux plugin manager
set -g @plugin 'tmux-plugins/tpm'
# Persists tmux environment across system restarts.
set -g @plugin 'tmux-plugins/tmux-resurrect'
# Continuous saving of tmux environment. Automatic restore when tmux is started.
# Automatic tmux start when computer is turned on.
set -g @plugin 'tmux-plugins/tmux-continuum'

#set -g @plugin '/Users/jason/Projects/C3E/c3e-tmux'
# Plugin configuration
# Automatically start iTerm, tmux, fullscreen
set -g @continuum-boot 'on'
set -g @continuum-boot-options 'iterm,fullscreen'
set -g @continuum-restore 'on'
#}}}

# C3E Plugin {{{
if-shell "test -f ~/Projects/C3E/c3e-tmux/c3e-tmuxline" "source ~/Projects/C3E/c3e-tmux/c3e-tmuxline"
if-shell "test -f ~/Projects/C3E/c3e-tmux/c3e-tmuxpane" "source ~/Projects/C3E/c3e-tmux/c3e-tmuxpane"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
if-shell "test -f ~/.tmux/plugins/tpm/tpm" "run ~/.tmux/plugins/tpm/tpm"
#}}}
